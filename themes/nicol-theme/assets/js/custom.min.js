"use strict";

function js_prefixAjaxDoneHandler(e) {
    0 < jQuery("select.orderby").length && jQuery("select.orderby").select2({
        width: "100%",
        dropdownParent: jQuery("select.orderby").parent()
    })
}

function update_product_count() {
    var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : jQuery(".woocommerce-result-count"),
        o = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : jQuery(".woocommerce-result-count").data("product-per-page"),
        t = e.text().trim().split(" "),
        n = t[1].split("–");
    n[1] = Number(n[1]) + Number(o), n[1] > t[3] && (n[1] = t[3]), t[1] = n.join("–"), e.html(t.join(" "))
}

function apply_masonry(e, o) {
    var t = o.data("horizontalorder");
    e.imagesLoaded(function() {
        o.masonry({
            columnWidth: ".grid-sizer",
            itemSelector: ".iqonic-masonry-item",
            horizontalOrder: t
        })
    })
}! function(r) {
    var o = r(window).scrollTop();
    r(window).scroll(function() {
        0 < r(".has-sticky").length && ((e = r(window).scrollTop()) < o ? (r(".has-sticky").addClass("header-up"), r("body").addClass("header--is-sticky"), r(".has-sticky").removeClass("header-down")) : (r(".has-sticky").addClass("header-down"), r(".has-sticky").removeClass("header-up "), r("body").removeClass("header--is-sticky")), 0 == e && (r(".has-sticky").removeClass("header-up"), r(".has-sticky").removeClass("header-down"), r("body").removeClass("header--is-sticky")), o = e);
        var e = r(window).scrollTop() / (r(document).height() - r(window).height());
        r(".text-top").css("--progress", e)
    }), r(window).on("load", function(e) {
        jQuery(document).on("click", "button.plus, button.minus", function() {
            r('button[name="update_cart"]').removeAttr("disabled");
            var e = r(this).closest(".quantity").find(".qty");
            "" == e.val() && e.val(0);
            var o = parseFloat(e.val()),
                t = parseFloat(e.attr("max")),
                n = parseFloat(e.attr("min")),
                s = parseFloat(e.attr("step"));
            r(this).is(".plus") ? t && t <= o ? e.val(t) : e.val(o + s) : n && o <= n ? e.val(n) : 1 <= o && e.val(o - s)
        }), new WOW({
            boxClass: "wow",
            animateClass: "animated",
            offset: 0,
            mobile: !0,
            live: !0
        }).init(), 0 < jQuery(".iqonic-masonry-grid").length && jQuery(".iqonic-masonry-grid").each(function() {
            var e = jQuery(this),
                o = e.data("horizontal-order");
            jQuery(".iqonic-masonry-block").imagesLoaded(function() {
                e.masonry({
                    columnWidth: ".grid-sizer",
                    itemSelector: ".iqonic-masonry-item",
                    horizontalOrder: o
                })
            })
        }), r(document).on("click", ".custom-toggler", function() {
            r(".css_prefix-mobile-menu ").hasClass("menu-open") ? (r(".css_prefix-mobile-menu ").toggleClass("open-delay"), setTimeout(function() {
                r(".css_prefix-mobile-menu ").toggleClass("menu-open"), r(".css_prefix-mobile-menu ").toggleClass("open-delay")
            }, 1e3)) : r(".css_prefix-mobile-menu ").toggleClass("menu-open"), r(".opn-menu").toggleClass("css_prefix-open")
        }), r(document).on("click", ".ham-toggle", function() {
            r(".ham-toggle .menu-btn").toggleClass("is-active")
        }), r(document).on("click", ".mob-toggle", function() {
            r("body").toggleClass("overflow-hidden")
        })
    }), r(document).ready(function() {
        function e() {
            var e = jQuery(".header-default");
            e && (e = e.height(), jQuery("html").css("--header-height", e / 16 + "em"))
        }
        r(".iq-fancybox-image").on("click", function() {
            var t = 0;
            ! function e() {
                var o = r(".dialog-widget.dialog-lightbox-widget.dialog-type-buttons.dialog-type-lightbox.elementor-lightbox");
                2 === o.length ? (o.eq(1).remove(), console.log("Second dialog removed after ".concat(t + 1, " attempts."))) : t++ < 10 ? (console.log("Attempt ".concat(t, ": Found ").concat(o.length, " dialogs. Retrying...")), setTimeout(e, 100)) : console.log("Max attempts reached. Dialogs not found with length 2.")
            }()
        }), r("ul.sf-menu").superfish({
            delay: 500,
            onBeforeShow: function(e) {
                var o, t, n = r(this),
                    s = 0,
                    i = 0,
                    a = 0;
                1 == n.length && (t = r("#page.site").width(), s = n.parents("li").eq(0).offset().left, i = n.parents("li").eq(0).outerWidth(), a = n.outerWidth(), n.hasClass("iqonic-megamenu-container") && (n.hasClass("iqonic-full-width") && r(".iqonic-megamenu-container.iqonic-full-width").css({
                    left: -s
                }), n.hasClass("iqonic-container-width") && (o = (0 < n.closest(".elementor-container").length ? n.closest(".elementor-container") : n.parents("li").eq(0).closest("header .container-fluid nav,header .container nav")).offset(), r(".iqonic-megamenu-container.iqonic-container-width").css({
                    left: -(s - o.left)
                }))), t - 20 < s + i + a && 0 < s - a ? (n.addClass("open-submenu-main"), n.css({
                    left: "auto",
                    right: "0"
                })) : (n.removeClass("open-submenu-main"), n.css({}))), 1 < n.parents("ul").length && ((t = r("#page.site").width()) - 20 < (s = n.parents("ul").eq(0).offset().left) + (i = n.parents("ul").eq(0).outerWidth()) + (a = n.outerWidth()) && 0 < s - a ? (n.addClass("open-submenu-left"), n.css({
                    left: "auto",
                    right: "100%"
                })) : n.removeClass("open-submenu-left"))
            }
        }), 0 < r(".btn-search").length && (r(".btn-search").click(function() {
            r(this).parent().find(".css_prefix-search").toggleClass("search--open")
        }), r(".btn-search-close").click(function() {
            r(this).closest(".css_prefix-search").toggleClass("search--open")
        })), r(".navbar-toggler").click(function() {
            r(window).width() < 1200 && r("body").toggleClass("overflow-hidden")
        }), r(window).on("resize", function() {
            1200 < r(window).width() ? r("body").hasClass("overflow-hidden") && r("body").removeClass("overflow-hidden") : r(".navbar-toggler").hasClass("moblie-menu-active") && r("body").addClass("overflow-hidden")
        }), 0 < r("select").length && (r("select").each(function() {
            var e = {
                width: "100%",
                dropdownParent: r(this).parent()
            };
            0 < r(this).parent().closest(".checkout").length && (e = {
                width: "100%"
            }), r(this).select2(e)
        }), r(".select2-container").addClass("wide")), 0 < r(".shop-filter-sidebar").length && r(document).on("click", ".shop-filter-sidebar", function() {
            r("body").find(".css_prefix-woo-sidebar").toggleClass("woo-sidebar-open")
        }), r("img").removeAttr("title"), e(), jQuery(window).resize(function() {
            console.log("widnow resize"), e()
        })
    }), jQuery(window).ready(function() {
        0 < jQuery(".iqonic-masonry-grid").length && jQuery(".iqonic-masonry-grid").each(function() {
            apply_masonry(jQuery(".iqonic-masonry-block"), jQuery(this))
        })
    })
}(jQuery), jQuery(document).ready(function() {
    jQuery(".icheckbox_square-blue").removeClass("icheckbox_square-blue")
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,